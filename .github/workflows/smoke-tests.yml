name: Smoke Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_call:

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  smoke-tests:
    name: Smoke Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install Robot Framework and dependencies
      run: |
        python -m pip install --upgrade pip
        pip install robotframework
        pip install robotframework-seleniumlibrary
        pip install robotframework-requests
        pip install robotframework-jsonlibrary
        pip install webdriver-manager
        pip install requests

    - name: Install Chrome and debugging tools
      run: |
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable netcat-openbsd

    - name: Create environment files
      run: |
        # Ensure environment files exist
        mkdir -p database backend
        echo "POSTGRES_USER=postgres" > database/.dev.env
        echo "POSTGRES_PASSWORD=840fb30f-e424-4a97-b58c-ef4433ebca85" >> database/.dev.env
        echo "POSTGRES_DB=todo-app" >> database/.dev.env
        echo "DATABASE_URL=postgresql://\${POSTGRES_USER}:\${POSTGRES_PASSWORD}@database:5432/\${POSTGRES_DB}" >> database/.dev.env
        
        echo "SECRET_KEY=test-secret-key-for-ci" > backend/.dev.env
        echo "TOKEN_ENCRYPTION_ALGORITHM=HS256" >> backend/.dev.env
        echo "ACCESS_TOKEN_EXPIRE_MINUTES=1440" >> backend/.dev.env
        echo "REFRESH_TOKEN_EXPIRE_DAYS=30" >> backend/.dev.env

    - name: Start application with Docker Compose
      run: |
        echo "Building and starting services..."
        
        # Build with verbose output to catch build issues
        docker compose -f compose.dev.yml build --progress=plain
        
        echo "Starting services with health checks..."
        docker compose -f compose.dev.yml up -d --wait
        
        echo "Immediate service status after startup:"
        docker compose -f compose.dev.yml ps
        
        echo "Services started, waiting for full initialization..."
        sleep 15

    - name: Wait for services to be ready
      run: |
        echo "üìä Service status:"
        docker compose -f compose.dev.yml ps
        
        echo "üîç Checking individual service health..."
        echo "Database migration logs:"
        docker compose -f compose.dev.yml logs database-migration | tail -30
        echo "Backend logs:"
        docker compose -f compose.dev.yml logs backend | tail -50
        echo "Database logs:"
        docker compose -f compose.dev.yml logs database | tail -20
        echo "Frontend logs:"
        docker compose -f compose.dev.yml logs frontend | tail -20
        
        # Check migration status
        migration_status=$(docker compose -f compose.dev.yml ps database-migration --format "{{.State}}")
        echo "Migration status: $migration_status"
        if [ "$migration_status" != "exited" ]; then
          echo "‚ùå Database migration did not complete successfully!"
          echo "Migration logs:"
          docker compose -f compose.dev.yml logs database-migration
          exit 1
        fi
        
        # Check if backend container is running
        if ! docker compose -f compose.dev.yml ps backend | grep -q "Up"; then
          echo "‚ùå Backend container is not running!"
          echo "Full backend logs:"
          docker compose -f compose.dev.yml logs backend
          exit 1
        fi
        
        # Use the robust health check script
        chmod +x ./e2e-tests/wait-for-services.sh
        ./e2e-tests/wait-for-services.sh

    - name: Run API Smoke Tests
      working-directory: ./backend/api-tests
      run: |
        robot --outputdir results-api-smoke \
              --include smoke \
              tests/

    - name: Run E2E Smoke Tests
      working-directory: ./e2e-tests
      run: |
        robot --outputdir results-e2e-smoke \
              --variable HEADLESS:True \
              --include smoke \
              tests/

    - name: Upload Smoke Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: smoke-test-results
        path: |
          backend/api-tests/results-api-smoke/
          e2e-tests/results-e2e-smoke/
        retention-days: 7
    - name: Cleanup
      if: always()
      run: |
        docker compose -f compose.dev.yml down
        docker compose -f compose.dev.yml down --volumes