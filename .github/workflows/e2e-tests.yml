name: E2E Tests

on:
  schedule:
    # Run full E2E tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    # Allow manual triggering
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'frontend/**'
      - 'backend/**'
      - 'e2e-tests/**'
      - 'compose.dev.yml'
      - '.github/workflows/e2e-tests.yml'

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install Robot Framework and dependencies
      run: |
        python -m pip install --upgrade pip
        pip install robotframework
        pip install robotframework-seleniumlibrary
        pip install robotframework-requests
        pip install robotframework-jsonlibrary
        pip install webdriver-manager

    - name: Install Chrome and debugging tools
      run: |
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable netcat-openbsd

    - name: Start application services
      run: |
        # Use the robust startup approach from Force Backend Fix Test
        echo "🚀 Starting services using robust Docker Compose approach..."
        
        # Clean up any existing containers
        docker compose -f compose.dev.yml down --volumes --remove-orphans || true
        
        # Create environment files
        mkdir -p database backend
        cat > database/.dev.env << EOF
        POSTGRES_USER=postgres
        POSTGRES_PASSWORD=840fb30f-e424-4a97-b58c-ef4433ebca85
        POSTGRES_DB=todo-app
        DATABASE_URL=postgresql://\${POSTGRES_USER}:\${POSTGRES_PASSWORD}@database:5432/\${POSTGRES_DB}
        EOF
        
        cat > backend/.dev.env << EOF
        SECRET_KEY=test-secret-key-for-ci
        TOKEN_ENCRYPTION_ALGORITHM=HS256
        ACCESS_TOKEN_EXPIRE_MINUTES=1440
        REFRESH_TOKEN_EXPIRE_DAYS=30
        EOF
        
        # Build with no cache to ensure fresh builds
        echo "🏗️  Building with no cache..."
        docker compose -f compose.dev.yml build --no-cache
        
        # Start database first
        echo "🗄️  Starting database..."
        docker compose -f compose.dev.yml up -d database
        
        # Wait for database
        echo "⏳ Waiting for database..."
        for i in {1..30}; do
          if docker compose -f compose.dev.yml exec -T database pg_isready -U postgres -d todo-app; then
            echo "✅ Database ready"
            break
          fi
          sleep 2
        done
        
        # Run migration
        echo "🔄 Running migration..."
        docker compose -f compose.dev.yml up database-migration
        if [ $? -ne 0 ]; then
          echo "❌ Migration failed"
          docker compose -f compose.dev.yml logs database-migration
          exit 1
        fi
        
        # Start backend
        echo "🔧 Starting backend..."
        docker compose -f compose.dev.yml up -d backend
        
        # Wait for backend with detailed checking
        echo "⏳ Waiting for backend..."
        for i in {1..60}; do
          # Check if container is running
          if ! docker compose -f compose.dev.yml ps backend | grep -q "Up"; then
            echo "❌ Backend container stopped running!"
            docker compose -f compose.dev.yml logs backend
            exit 1
          fi
          
          # Test connectivity
          if curl -f http://localhost:4322/health >/dev/null 2>&1; then
            echo "✅ Backend ready!"
            break
          fi
          
          if [ $i -eq 60 ]; then
            echo "❌ Backend failed to respond"
            docker compose -f compose.dev.yml logs backend
            exit 1
          fi
          
          sleep 2
        done
        
        # Start frontend
        echo "🌐 Starting frontend..."
        docker compose -f compose.dev.yml up -d frontend
        
        # Wait for frontend
        echo "⏳ Waiting for frontend..."
        for i in {1..30}; do
          if curl -f http://localhost:4321 >/dev/null 2>&1; then
            echo "✅ Frontend ready!"
            break
          fi
          sleep 2
        done
        
        echo "🎉 All services started successfully!"
        docker compose -f compose.dev.yml ps

    - name: Verify services are accessible
      run: |
        echo "🔍 Post-startup verification..."
        
        echo "Testing frontend..."
        curl -f http://localhost:4321 >/dev/null && echo "✅ Frontend OK" || echo "❌ Frontend failed"
        
        echo "Testing backend health..."
        curl -f http://localhost:4322/health && echo "✅ Backend health OK" || echo "❌ Backend health failed"
        
        echo "Testing backend API..."
        curl -f http://localhost:4322/api/todo-lists/roles >/dev/null && echo "✅ Backend API OK" || echo "❌ Backend API failed"

    - name: Run E2E Tests
      working-directory: ./e2e-tests
      run: |
        robot --outputdir results \
              --variable HEADLESS:True \
              --include smoke \
              tests/

    - name: Upload E2E Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-test-results
        path: e2e-tests/results/
        retention-days: 30

    - name: Upload Screenshots on Failure
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: e2e-failure-screenshots
        path: e2e-tests/results/selenium-screenshot-*.png
        retention-days: 7

    - name: Cleanup
      if: always()
      run: |
        docker compose -f compose.dev.yml down --volumes --remove-orphans || true

  full-e2e-tests:
    name: Full E2E Test Suite
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install Robot Framework and dependencies
      run: |
        python -m pip install --upgrade pip
        pip install robotframework
        pip install robotframework-seleniumlibrary
        pip install robotframework-requests
        pip install robotframework-jsonlibrary
        pip install webdriver-manager

    - name: Install Chrome and debugging tools
      run: |
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable netcat-openbsd

    - name: Start application services
      run: |
        # Use the robust startup approach from Force Backend Fix Test
        echo "🚀 Starting services using robust Docker Compose approach..."
        
        # Clean up any existing containers
        docker compose -f compose.dev.yml down --volumes --remove-orphans || true
        
        # Create environment files
        mkdir -p database backend
        cat > database/.dev.env << EOF
        POSTGRES_USER=postgres
        POSTGRES_PASSWORD=840fb30f-e424-4a97-b58c-ef4433ebca85
        POSTGRES_DB=todo-app
        DATABASE_URL=postgresql://\${POSTGRES_USER}:\${POSTGRES_PASSWORD}@database:5432/\${POSTGRES_DB}
        EOF
        
        cat > backend/.dev.env << EOF
        SECRET_KEY=test-secret-key-for-ci
        TOKEN_ENCRYPTION_ALGORITHM=HS256
        ACCESS_TOKEN_EXPIRE_MINUTES=1440
        REFRESH_TOKEN_EXPIRE_DAYS=30
        EOF
        
        # Build with no cache to ensure fresh builds
        echo "🏗️  Building with no cache..."
        docker compose -f compose.dev.yml build --no-cache
        
        # Start database first
        echo "🗄️  Starting database..."
        docker compose -f compose.dev.yml up -d database
        
        # Wait for database
        echo "⏳ Waiting for database..."
        for i in {1..30}; do
          if docker compose -f compose.dev.yml exec -T database pg_isready -U postgres -d todo-app; then
            echo "✅ Database ready"
            break
          fi
          sleep 2
        done
        
        # Run migration
        echo "🔄 Running migration..."
        docker compose -f compose.dev.yml up database-migration
        if [ $? -ne 0 ]; then
          echo "❌ Migration failed"
          docker compose -f compose.dev.yml logs database-migration
          exit 1
        fi
        
        # Start backend
        echo "🔧 Starting backend..."
        docker compose -f compose.dev.yml up -d backend
        
        # Wait for backend with detailed checking
        echo "⏳ Waiting for backend..."
        for i in {1..60}; do
          # Check if container is running
          if ! docker compose -f compose.dev.yml ps backend | grep -q "Up"; then
            echo "❌ Backend container stopped running!"
            docker compose -f compose.dev.yml logs backend
            exit 1
          fi
          
          # Test connectivity
          if curl -f http://localhost:4322/health >/dev/null 2>&1; then
            echo "✅ Backend ready!"
            break
          fi
          
          if [ $i -eq 60 ]; then
            echo "❌ Backend failed to respond"
            docker compose -f compose.dev.yml logs backend
            exit 1
          fi
          
          sleep 2
        done
        
        # Start frontend
        echo "🌐 Starting frontend..."
        docker compose -f compose.dev.yml up -d frontend
        
        # Wait for frontend
        echo "⏳ Waiting for frontend..."
        for i in {1..30}; do
          if curl -f http://localhost:4321 >/dev/null 2>&1; then
            echo "✅ Frontend ready!"
            break
          fi
          sleep 2
        done
        
        echo "🎉 All services started successfully!"
        docker compose -f compose.dev.yml ps

    - name: Verify services are accessible
      run: |
        echo "🔍 Post-startup verification..."
        
        echo "Testing frontend..."
        curl -f http://localhost:4321 >/dev/null && echo "✅ Frontend OK" || echo "❌ Frontend failed"
        
        echo "Testing backend health..."
        curl -f http://localhost:4322/health && echo "✅ Backend health OK" || echo "❌ Backend health failed"
        
        echo "Testing backend API..."
        curl -f http://localhost:4322/api/todo-lists/roles >/dev/null && echo "✅ Backend API OK" || echo "❌ Backend API failed"

    - name: Run Full E2E Test Suite
      working-directory: ./e2e-tests
      run: |
        robot --outputdir results \
              --variable HEADLESS:True \
              tests/

    - name: Upload Full E2E Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: full-e2e-test-results
        path: e2e-tests/results/
        retention-days: 30

    - name: Cleanup
      if: always()
      run: |
        docker compose -f compose.dev.yml down --volumes --remove-orphans || true